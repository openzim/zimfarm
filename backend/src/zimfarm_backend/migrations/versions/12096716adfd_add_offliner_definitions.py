"""add offliner definitions

Revision ID: 12096716adfd
Revises: 60c546babd23
Create Date: 2025-09-25 00:45:04.365564

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "12096716adfd"
down_revision = "60c546babd23"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "offliner_definition",
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("offliner", sa.String(), nullable=False),
        sa.Column("schema", postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_offliner_definition")),
        sa.UniqueConstraint(
            "offliner", "version", name=op.f("uq_offliner_definition_offliner")
        ),
    )

    # Set the foreign keys of the requested task, task and schedule to be nullable.
    # After seeding, we alter it to False to reflect application requirements

    op.add_column(
        "requested_task", sa.Column("offliner_definition_id", sa.Uuid(), nullable=True)
    )
    op.create_foreign_key(
        op.f("fk_requested_task_offliner_definition_id_offliner_definition"),
        "requested_task",
        "offliner_definition",
        ["offliner_definition_id"],
        ["id"],
    )

    op.add_column(
        "schedule", sa.Column("offliner_definition_id", sa.Uuid(), nullable=True)
    )
    op.create_foreign_key(
        op.f("fk_schedule_offliner_definition_id_offliner_definition"),
        "schedule",
        "offliner_definition",
        ["offliner_definition_id"],
        ["id"],
    )

    op.add_column("task", sa.Column("offliner_definition_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        op.f("fk_task_offliner_definition_id_offliner_definition"),
        "task",
        "offliner_definition",
        ["offliner_definition_id"],
        ["id"],
    )

    # Reset the foreign keys to be non-nullable
    op.alter_column(
        "schedule",
        "offliner_definition_id",
        existing_type=sa.Uuid(),
        nullable=False,
    )
    op.alter_column(
        "requested_task",
        "offliner_definition_id",
        existing_type=sa.Uuid(),
        nullable=False,
    )
    op.alter_column(
        "task",
        "offliner_definition_id",
        existing_type=sa.Uuid(),
        nullable=False,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_task_offliner_definition_id_offliner_definition"),
        "task",
        type_="foreignkey",
    )
    op.drop_column("task", "offliner_definition_id")

    op.drop_constraint(
        op.f("fk_schedule_offliner_definition_id_offliner_definition"),
        "schedule",
        type_="foreignkey",
    )
    op.drop_column("schedule", "offliner_definition_id")

    op.drop_constraint(
        op.f("fk_requested_task_offliner_definition_id_offliner_definition"),
        "requested_task",
        type_="foreignkey",
    )
    op.drop_column("requested_task", "offliner_definition_id")

    op.drop_table("offliner_definition")
    # ### end Alembic commands ###
