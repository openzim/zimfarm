services:
  postgresdb:
    image: postgres:17.3-bookworm
    container_name: zf_postgresdb
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - pg_data_zimfarm:/var/lib/postgresql/data
      - ./postgres-initdb:/docker-entrypoint-initdb.d
    # - ./restore/root/.borgmatic/postgresql_databases/api-postgres-db-service/zimfarm:/data/zimfarm
    environment:
      - POSTGRES_DB=zimfarm
      - POSTGRES_USER=zimfarm
      - POSTGRES_PASSWORD=zimpass
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "dbname=zimfarm user=zimfarm"]
      interval: 10s
      timeout: 5s
      retries: 3
  backend:
    build:
      context: ../backend
    container_name: zf_backend
    volumes:
      - ../backend/prestart.sh:/app/prestart.sh
      - ../backend/periodic-scheduler.py:/app/periodic-scheduler.py
      - ../backend/periodic-tasks.py:/app/periodic-tasks.py
      - ../backend/maint-scripts:/app/maint-scripts
      - ../backend/src/zimfarm_backend:/usr/local/lib/python3.13/site-packages/zimfarm_backend
      - ../backend/periodic.conf.dev:/etc/supervisor/conf.d/periodic.conf:ro
    ports:
      - 127.0.0.1:8000:80
    environment:
      DEBUG: true
      JWT_SECRET: DH8kSxcflUVfNRdkEiJJCn2dOOKI3qfw
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimfarm
      ALEMBIC_UPGRADE_HEAD_ON_START: "1"
      # upload artifacts, logs and zim to receiver for simplicity
      ARTIFACTS_UPLOAD_URI: sftp://uploader@receiver:22/logs/ # reusing logs dir, kind of a hack
      LOGS_UPLOAD_URI: sftp://uploader@receiver:22/logs/
      ZIM_UPLOAD_URI: sftp://uploader@receiver:22/zim/
      ZIMCHECK_OPTION: --all
      ALLOWED_ORIGINS: http://localhost:8001,http://localhost:8002
    depends_on:
      postgresdb:
        condition: service_healthy
  frontend-ui:
    build: ../frontend-ui
    container_name: zf_frontend-ui
    volumes:
      - ./frontend-ui-dev/config.json:/usr/share/nginx/html/config.json:ro
    ports:
      - 127.0.0.1:8001:80
    depends_on:
      backend:
        condition: service_healthy
  frontend-ui-dev:
    build:
      dockerfile: ../dev/frontend-ui-dev/Dockerfile
      context: ../frontend-ui
    container_name: zf_frontend-ui-dev
    volumes:
      - ../frontend-ui/src:/app/src
      - ./frontend-ui-dev/config.json:/app/public/config.json:ro
    ports:
      - 127.0.0.1:8002:80
    depends_on:
      backend:
        condition: service_healthy
  backend-tools:
    build:
      dockerfile: ../dev/backend-tools-tests/Dockerfile
      context: ../backend
    container_name: zf_backend-tools
    command: tail -f /dev/null
    volumes:
      - ../backend/src:/app/src
    environment:
      JWT_SECRET: DH8kSxcflUVfNRdkEiJJCn2dOOKI3qfw
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimfarm
    depends_on:
      - postgresdb
  backend-tests:
    build:
      dockerfile: ../dev/backend-tools-tests/Dockerfile
      context: ../backend
    container_name: zf_backend-tests
    command: tail -f /dev/null
    volumes:
      - ../backend/src:/app/src
      - ../backend/tests:/app/tests
    environment:
      JWT_SECRET: DH8kSxcflUVfNRdkEiJJCn2dOOKI3qfw
      POSTGRES_URI: postgresql+psycopg://zimfarm:zimpass@postgresdb:5432/zimtest
    depends_on:
      - postgresdb
  receiver:
    build: ../receiver
    container_name: zf_receiver
    ports:
      - 127.0.0.1:8222:22
    volumes:
      - ./receiver/create-warehouse-paths.sh:/contrib/create-warehouse-paths.sh
    environment:
      - ZIMFARM_WEBAPI=http://backend:80/v2
    depends_on:
      backend:
        condition: service_healthy

  # # uncomment this only if you want to run a StackExchange dumps watcher
  # watcher:
  #   build: ../watcher
  #   container_name: zf_watcher
  #   command: watcher --only beer.stackexchange.com --debug
  #   environment:
  #     - ZIMFARM_API_URL=http://backend:8000/v1
  #     - ZIMFARM_USERNAME=admin
  #     - ZIMFARM_PASSWORD=admin
  #     - S3_URL=https://s3.us-west-1.wasabisys.com/?keyId=<your_key_id>&secretAccessKey=<your_secret_access_key>&bucketName=org-kiwix-dev-stackexchange
  #   depends_on:
  #     - backend

  # uncomment this only if you want to run a worker manager
  # worker_mgr:
  #   build:
  #     context: ../worker
  #     dockerfile: manager-Dockerfile
  #   container_name: zf_worker_mgr
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #     task_worker:
  #       condition: service_started
  #   command: worker-manager --webapi-uri 'http://backend:80/v2' --username test_worker --name test_worker
  #   environment:
  #     - DEBUG=true
  #     - TASK_WORKER_IMAGE=zf_task_worker
  #     - ENVIRONMENT=development
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./test_worker-identity/id_rsa:/etc/ssh/keys/zimfarm

  # uncomment this only if you want to run a 'standalone' task worker
  # you have to modify the command
  # task_worker:
  #   build:
  #     context: ../worker
  #     dockerfile: task-Dockerfile
  #   image: zf_task_worker
  #   container_name: zf_task_worker
  #   depends_on:
  #     - backend
  #   command: task-worker --help
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./test_worker-identity/id_rsa:/etc/ssh/keys/zimfarm
  #   environment:
  #     - DEBUG=true
  #     - ENVIRONMENT=development

volumes:
  pg_data_zimfarm:
